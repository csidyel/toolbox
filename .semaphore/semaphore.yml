version: v1.0
name: Toolbox S2 project
agent:
  machine:
    type: f1-standard-2
    os_image: ubuntu2004
execution_time_limit:
  minutes: 30
blocks:
  - name: Build local CLIs
    dependencies: []
    task:
      jobs:
        - name: Build cache CLI
          commands:
            - sem-version go 1.18
            - export GOPATH=~/go
            - 'export PATH=/home/semaphore/go/bin:$PATH'
            - checkout
            - cd cache-cli
            - make build.linux ARCH=amd64
            - make build.linux ARCH=arm64
            - make build.darwin ARCH=amd64
            - make build.darwin ARCH=arm64
            - make build.windows
            - artifact push workflow bin/linux/amd64/cache -d bin/linux/amd64/cache
            - artifact push workflow bin/linux/arm64/cache -d bin/linux/arm64/cache
            - artifact push workflow bin/darwin/amd64/cache -d bin/darwin/amd64/cache
            - artifact push workflow bin/darwin/arm64/cache -d bin/darwin/arm64/cache
            - artifact push workflow bin/windows/cache.exe -d bin/windows/cache.exe
        - name: Build sem-context CLI
          commands:
            - sem-version go 1.17
            - export GOPATH=~/go
            - 'export PATH=/home/semaphore/go/bin:$PATH'
            - checkout
            - cd sem-context
            - make build.linux ARCH=amd64
            - make build.linux ARCH=arm64
            - make build.darwin ARCH=amd64
            - make build.darwin ARCH=arm64
            - make build.windows
            - artifact push workflow bin/linux/amd64/sem-context -d bin/linux/amd64/sem-context
            - artifact push workflow bin/linux/arm64/sem-context -d bin/linux/arm64/sem-context
            - artifact push workflow bin/darwin/amd64/sem-context -d bin/darwin/amd64/sem-context
            - artifact push workflow bin/darwin/arm64/sem-context -d bin/darwin/arm64/sem-context
            - artifact push workflow bin/windows/sem-context.exe -d bin/windows/sem-context.exe
  - name: 'PowerShell: tests'
    dependencies: []
    task:
      prologue:
        commands:
          - checkout
      jobs:
        - name: checkout tests
          commands:
            - make pwsh.test
  - name: Sem Version Tests Bionic
    dependencies:
      - Build local CLIs
    task:
      prologue:
        commands:
          - checkout
          - artifact pull workflow bin/linux/amd64/cache -d cache-cli/bin/linux/amd64/cache
          - artifact pull workflow bin/linux/arm64/cache -d cache-cli/bin/linux/arm64/cache
          - artifact pull workflow bin/darwin/amd64/cache -d cache-cli/bin/darwin/amd64/cache
          - artifact pull workflow bin/linux/arm64/sem-context -d sem-context/bin/linux/arm64/sem-context
          - artifact pull workflow bin/linux/amd64/sem-context -d sem-context/bin/linux/amd64/sem-context
          - artifact pull workflow bin/darwin/amd64/sem-context -d sem-context/bin/darwin/amd64/sem-context
          - bash release/create.sh
          - source release/install_in_tests.sh
          - git submodule init && git submodule update
          - sudo ./tests/support/bats-core/install.sh /usr/local
      jobs:
        - name: Sem Version
          matrix:
            - env_var: TEST
              values:
                - elixir
                - erlang
                - firefox
                - go
                - java
                - kubectl
                - node
                - python
                - ruby
                - scala
          commands:
            - 'bats tests/sem_version_bionic/${TEST}.bats'
  - name: Sem Version Tests Focal
    dependencies:
      - Build local CLIs
    task:
      agent:
        machine:
          type: e1-standard-2
          os_image: ubuntu2004
      prologue:
        commands:
          - checkout
          - sudo apt-get update
          - sudo apt-get install -y libargon2-0
          - artifact pull workflow bin/linux/amd64/cache -d cache-cli/bin/linux/amd64/cache
          - artifact pull workflow bin/linux/arm64/cache -d cache-cli/bin/linux/arm64/cache
          - artifact pull workflow bin/darwin/amd64/cache -d cache-cli/bin/darwin/amd64/cache
          - artifact pull workflow bin/linux/amd64/sem-context -d sem-context/bin/linux/amd64/sem-context
          - artifact pull workflow bin/linux/arm64/sem-context -d sem-context/bin/linux/arm64/sem-context
          - artifact pull workflow bin/darwin/amd64/sem-context -d sem-context/bin/darwin/amd64/sem-context
          - bash release/create.sh
          - source release/install_in_tests.sh
          - git submodule init && git submodule update
          - sudo ./tests/support/bats-core/install.sh /usr/local
      jobs:
        - name: Sem Version
          matrix:
            - env_var: TEST
              values:
                - php
          commands:
            - 'bats tests/sem_version_focal/${TEST}.bats'
  - name: Sem Version Tests container
    dependencies:
      - Build local CLIs
    task:
      agent:
        machine:
          type: e1-standard-2
          os_image: ubuntu2004
        containers:
          - name: main
            image: 'registry.semaphoreci.com/android:30-flutter'
      prologue:
        commands:
          - checkout
          - artifact pull workflow bin/linux/amd64/cache -d cache-cli/bin/linux/amd64/cache
          - artifact pull workflow bin/linux/arm64/cache -d cache-cli/bin/linux/arm64/cache
          - artifact pull workflow bin/darwin/amd64/cache -d cache-cli/bin/darwin/amd64/cache
          - artifact pull workflow bin/linux/amd64/sem-context -d sem-context/bin/linux/amd64/sem-context
          - artifact pull workflow bin/linux/arm64/sem-context -d sem-context/bin/linux/arm64/sem-context
          - artifact pull workflow bin/darwin/amd64/sem-context -d sem-context/bin/darwin/amd64/sem-context
          - bash release/create.sh
          - source tests/sftp_server/start_on_mac.sh
          - source release/install_in_tests.sh
          - git submodule init && git submodule update
          - sudo ./tests/support/bats-core/install.sh /usr/local
      jobs:
        - name: Sem Version Flutter
          commands:
            - bats tests/sem_version_container.bats
  - name: Sem Service Tests
    dependencies:
      - Build local CLIs
    task:
      prologue:
        commands:
          - checkout
          - artifact pull workflow bin/linux/amd64/cache -d cache-cli/bin/linux/amd64/cache
          - artifact pull workflow bin/linux/arm64/cache -d cache-cli/bin/linux/arm64/cache
          - artifact pull workflow bin/darwin/amd64/cache -d cache-cli/bin/darwin/amd64/cache
          - artifact pull workflow bin/linux/amd64/sem-context -d sem-context/bin/linux/amd64/sem-context
          - artifact pull workflow bin/linux/arm64/sem-context -d sem-context/bin/linux/arm64/sem-context
          - artifact pull workflow bin/darwin/amd64/sem-context -d sem-context/bin/darwin/amd64/sem-context
          - bash release/create.sh
          - source release/create.sh
          - cd ~/$SEMAPHORE_GIT_DIR/
          - source release/install_in_tests.sh
      jobs:
        - name: Sem service tests
          matrix:
            - env_var: TEST
              values:
                - mysql
                - postgres
                - postgis
                - redis
                - memcached
                - rabbitmq
                - mongodb
                - opensearch
                - elasticsearch
                - cassandra
                - rethinkdb
          commands:
            - bash tests/sem_service/$TEST
  - name: 'Bats: Docker'
    dependencies:
      - Build local CLIs
    task:
      agent:
        machine:
          type: f1-standard-2
          os_image: ubuntu2004
        containers:
          - name: main
            image: 'semaphoreci/ruby:2.6.2'
      prologue:
        commands:
          - checkout
          - artifact pull workflow bin/linux/amd64/cache -d cache-cli/bin/linux/amd64/cache
          - artifact pull workflow bin/linux/arm64/cache -d cache-cli/bin/linux/arm64/cache
          - artifact pull workflow bin/darwin/amd64/cache -d cache-cli/bin/darwin/amd64/cache
          - artifact pull workflow bin/linux/amd64/sem-context -d sem-context/bin/linux/amd64/sem-context
          - artifact pull workflow bin/linux/arm64/sem-context -d sem-context/bin/linux/arm64/sem-context
          - artifact pull workflow bin/darwin/amd64/sem-context -d sem-context/bin/darwin/amd64/sem-context
          - bash release/create.sh
          - source tests/sftp_server/start_on_docker.sh
      jobs:
        - name: Cache tests
          matrix:
            - env_var: TEST
              values:
                - tests/libcheckout.bats
            - env_var: SEMAPHORE_CACHE_ARCHIVE_METHOD
              values:
                - shell-out
                - native
                - native-parallel
          commands:
            - source release/install_in_tests.sh
            - git submodule init && git submodule update
            - sudo ./tests/support/bats-core/install.sh /usr/local
            - bats --report-formatter junit --tap --timing $TEST
        - name: Non-cache tests
          matrix:
            - env_var: TEST
              values:
                - tests/artifacts.bats
                - tests/test-results.bats
          commands:
            - source release/install_in_tests.sh
            - git submodule init && git submodule update
            - sudo ./tests/support/bats-core/install.sh /usr/local
            - bats --report-formatter junit --tap --timing $TEST
      epilogue:
        always:
          commands:
            - 'test-results publish report.xml --name="Bats: Docker" --suite-prefix=$TEST'
  - name: 'Bats: Minimal Docker'
    dependencies:
      - Build local CLIs
    task:
      agent:
        machine:
          type: f1-standard-2
          os_image: ubuntu2004
        containers:
          - name: main
            image: 'semaphoreci/alpine:3.9'
      prologue:
        commands:
          - checkout
          - artifact pull workflow bin/linux/amd64/cache -d cache-cli/bin/linux/amd64/cache
          - artifact pull workflow bin/linux/arm64/cache -d cache-cli/bin/linux/arm64/cache
          - artifact pull workflow bin/darwin/amd64/cache -d cache-cli/bin/darwin/amd64/cache
          - artifact pull workflow bin/linux/amd64/sem-context -d sem-context/bin/linux/amd64/sem-context
          - artifact pull workflow bin/linux/arm64/sem-context -d sem-context/bin/linux/arm64/sem-context
          - artifact pull workflow bin/darwin/amd64/sem-context -d sem-context/bin/darwin/amd64/sem-context
          - bash release/create.sh
          - apk add --update docker openrc
          - source tests/sftp_server/start_on_docker.sh
      jobs:
        - name: Cache tests
          matrix:
            - env_var: TEST
              values:
                - tests/libcheckout.bats
            - env_var: SEMAPHORE_CACHE_ARCHIVE_METHOD
              values:
                - shell-out
                - native
                - native-parallel
          commands:
            - source release/install_in_tests.sh
            - git submodule init && git submodule update
            - ./tests/support/bats-core/install.sh /usr/local
            - bats --report-formatter junit --tap --timing $TEST
        - name: Non-cache tests
          matrix:
            - env_var: TEST
              values:
                - tests/artifacts.bats
                - tests/test-results.bats
          commands:
            - source release/install_in_tests.sh
            - git submodule init && git submodule update
            - ./tests/support/bats-core/install.sh /usr/local
            - bats --report-formatter junit --tap --timing $TEST
      epilogue:
        always:
          commands:
            - 'test-results publish report.xml --name="Bats: Minimal Docker" --suite-prefix=$TEST'
  - name: 'Bats: Linux'
    dependencies:
      - Build local CLIs
    task:
      prologue:
        commands:
          - checkout
          - artifact pull workflow bin/linux/amd64/cache -d cache-cli/bin/linux/amd64/cache
          - artifact pull workflow bin/linux/arm64/cache -d cache-cli/bin/linux/arm64/cache
          - artifact pull workflow bin/darwin/amd64/cache -d cache-cli/bin/darwin/amd64/cache
          - artifact pull workflow bin/linux/amd64/sem-context -d sem-context/bin/linux/amd64/sem-context
          - artifact pull workflow bin/linux/arm64/sem-context -d sem-context/bin/linux/arm64/sem-context
          - artifact pull workflow bin/darwin/amd64/sem-context -d sem-context/bin/darwin/amd64/sem-context
          - bash release/create.sh
          - source tests/sftp_server/start_on_linux.sh
          - sudo apt-get install -y python3.8-dev
          - sem-version python 3.8
          - sem-version go 1.13
          - sem-version php 7.3.23
      jobs:
        - name: Cache tests
          matrix:
            - env_var: TEST
              values:
                - tests/libcheckout.bats
            - env_var: SEMAPHORE_CACHE_ARCHIVE_METHOD
              values:
                - shell-out
                - native
                - native-parallel
          commands:
            - source release/install_in_tests.sh
            - git submodule init && git submodule update
            - sudo ./tests/support/bats-core/install.sh /usr/local
            - bats --report-formatter junit --tap --timing $TEST
        - name: Non-cache tests
          matrix:
            - env_var: TEST
              values:
                - tests/install_package.bats
                - tests/artifacts.bats
                - tests/compiler.bats
                - tests/test-results.bats
                - tests/enetwork.bats
                - tests/sem-semantic-release.bats
          commands:
            - source release/install_in_tests.sh
            - git submodule init && git submodule update
            - sudo ./tests/support/bats-core/install.sh /usr/local
            - bats --report-formatter junit --tap --timing $TEST
      epilogue:
        always:
          commands:
            - 'test-results publish report.xml --name="Bats: Linux" --suite-prefix=$TEST'
  - name: 'Cache CLI: Tests'
    dependencies: []
    run:
      when: 'change_in(''/cache-cli'', {pipeline_file: ''ignore''})'
    task:
      prologue:
        commands:
          - checkout && cd cache-cli
          - make test.setup
      jobs:
        - name: Test
          commands:
            - make test
      epilogue:
        always:
          commands:
            - docker-compose logs s3
            - test-results publish junit-report.xml
  - name: 'Cache CLI: Lint'
    dependencies: []
    run:
      when: 'change_in(''/cache-cli'', {pipeline_file: ''ignore''})'
    task:
      env_vars:
        - name: GO111MODULE
          value: 'on'
      prologue:
        commands:
          - sem-version go 1.18
          - checkout && cd cache-cli
      jobs:
        - name: Lint
          commands:
            - go install github.com/mgechev/revive@latest
            - make lint
  - name: 'Cache CLI: Security checks'
    dependencies: []
    run:
      when: 'change_in(''/cache-cli'', {pipeline_file: ''ignore''})'
    task:
      prologue:
        commands:
          - checkout && cd cache-cli
          - mv ~/.ssh/security-toolbox ~/.ssh/id_rsa
          - sudo chmod 600 ~/.ssh/id_rsa
      jobs:
        - name: Check code
          commands:
            - make check.static
      epilogue:
        always:
          commands:
            - 'if [ -f results.xml ]; then test-results publish --name="Cache CLI: Security checks" results.xml; fi'
  - name: SHM Test Bionic
    dependencies:
      - Build local CLIs
    task:
      prologue:
        commands:
          - checkout
          - artifact pull workflow bin/linux/amd64/cache -d cache-cli/bin/linux/amd64/cache
          - artifact pull workflow bin/linux/arm64/cache -d cache-cli/bin/linux/arm64/cache
          - artifact pull workflow bin/darwin/amd64/cache -d cache-cli/bin/darwin/amd64/cache
          - artifact pull workflow bin/linux/amd64/sem-context -d sem-context/bin/linux/amd64/sem-context
          - artifact pull workflow bin/linux/arm64/sem-context -d sem-context/bin/linux/arm64/sem-context
          - artifact pull workflow bin/darwin/amd64/sem-context -d sem-context/bin/darwin/amd64/sem-context
          - bash release/create.sh
          - source release/install_in_tests.sh
          - git submodule init && git submodule update
          - sudo ./tests/support/bats-core/install.sh /usr/local
      jobs:
        - name: SHM Test Bionic
          commands:
            - sed -i "s/\/tmp\/system-metrics/\/tmp\/system-metrics2/g" ~/.toolbox/system-metrics-collector
            - . ~/.toolbox/system-metrics-collector &
            - sleep 2
            - bats tests/shm/shm_ubuntu.bats
            - cat /tmp/system-metrics2
  - name: SHM Test Docker
    dependencies:
      - Build local CLIs
    task:
      agent:
        machine:
          type: e1-standard-2
          os_image: ubuntu2004
        containers:
          - name: main
            image: 'registry.semaphoreci.com/ubuntu:18.04'
      prologue:
        commands:
          - checkout
          - artifact pull workflow bin/linux/amd64/cache -d cache-cli/bin/linux/amd64/cache
          - artifact pull workflow bin/linux/arm64/cache -d cache-cli/bin/linux/arm64/cache
          - artifact pull workflow bin/darwin/amd64/cache -d cache-cli/bin/darwin/amd64/cache
          - artifact pull workflow bin/linux/amd64/sem-context -d sem-context/bin/linux/amd64/sem-context
          - artifact pull workflow bin/linux/arm64/sem-context -d sem-context/bin/linux/arm64/sem-context
          - artifact pull workflow bin/darwin/amd64/sem-context -d sem-context/bin/darwin/amd64/sem-context
          - bash release/create.sh
          - source release/install_in_tests.sh
          - git submodule init && git submodule update
          - sudo ./tests/support/bats-core/install.sh /usr/local
      jobs:
        - name: SHM Test Docker
          commands:
            - sed -i "s/\/tmp\/system-metrics/\/tmp\/system-metrics2/g" ~/.toolbox/system-metrics-collector
            - . ~/.toolbox/system-metrics-collector &
            - sleep 2
            - bats tests/shm/shm_docker.bats
            - cat /tmp/system-metrics2
after_pipeline:
  task:
    jobs:
      - name: Submit Reports
        commands:
          - test-results gen-pipeline-report
promotions:
  - name: Deploy to production
    pipeline_file: release.yml
    deployment_target: Production
    auto_promote:
      when: result = 'passed'
  - name: Deploy to staging
    pipeline_file: pipeline_3.yml
    deployment_target: staging
    auto_promote:
      when: result = 'passed'
  - name: Promotion 3
    pipeline_file: pipeline_4.yml
    deployment_target: production
    auto_promote:
      when: branch = 'master' AND result = 'passed'
